#!/bin/sh

set -eu

# Disable brew
#
# This script is particularly useful for disabling brew(1) when building
# versions of Python via pyenv.

say()
{
    printf '%s\n' "$1"
}

usage()
{
    {
        say "usage: ${0##*/} [ cmd ... ]"
        say "example:"
        say "  ${0##*/} pyenv install 2.7.10"
    } >&2
    exit 1
}

resolvepath()
{
    while : ; do
        set -- "$(dirname "$1")" "$(basename "$1")"
        set -- "$1" "$2" "$(cd "$1" && readlink "$2")"

        [ -z "${3##/*}" ] || set -- "$1" "$2" "$(cd "$1" && pwd -P)/$3"

        set -- "$3"
        [ -h "$1" ] || break

    done
    say "$1"
}

canonicalpath()
{
    set -- "$(dirname "$1")" "$(basename "$1")"
    set -- "$(cd "$1" && pwd -P)/$2"
    say "$1"
}

# Clean up path
#
# Resolve the absolute path of this script, then resolve all symlink
# references to find the absolute path to the underlying file. If the
# result has any dotted components, clean up the path by retrieving
# its canonical form.

[ -z "${0##/*}" ] || exec "$PWD/$0" "$@"
[ ! -h "$0" ] || exec "$(resolvepath "$0")" "$@"
[ -n "${0##*/./*}" -a -n "${0##*/../*}" ] || exec "$(canonicalpath "$0")" "$@"

# Check for supported options
#
# Presently there are no supported options, and any option (in particular
# -h or --help) will trigger the usage summary.

[ $# -lt 1 ] || [ -n "$1" -a -n "${1##-*}" ] || usage

# Insert proxy brew(1)
#
# Find the path to the proxy brew command, then execute the program
# named on the command line.

[ $# -eq 0 ] || set -- exec "$@"

PATH="$(canonicalpath "${0%/*}/../libexec")${PATH+:$PATH}" "$@"
